import distutils.sysconfig, os
import KCore.Dist as Dist
from KCore.config import *

#==============================================================================
# OCC requires:
# ELSAPROD variable defined in environment
# C++ compiler
# KCore library
# Numpy
# Generator library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists ========================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

# Test if generator exists ====================================================
(generatorVersion, generatorIncDir, generatorLibDir) = Dist.checkGenerator()

# Test if open-cascade is installed ===========================================
(OCEPresent, OCEIncDir, OCELibDir) = Dist.checkOCE(additionalLibPaths, 
                                                   additionalIncludePaths)

if OCEPresent:
        OCCIncDir = OCEIncDir+'/oce'
else:
        # Hack: To make a full path name for the OCC include dir (the relative path to build/... doesn't contain everything, e.g fff is not copied
        import KCore.installPath
        OCCIncDir = KCore.installPath.includePath
        OCCIncDir = os.path.dirname(OCCIncDir)
        OCCIncDir = os.path.join(OCCIncDir, 'OCC/OCC/occ_inc')

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir, generatorLibDir]
includeDirs = [OCCIncDir, generatorIncDir, pythonIncDir, numpyIncDir, kcoreIncDir]
libraries = ["generator", "kcore"]
(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

# Env =========================================================================
import srcs
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None
AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CPPFLAGS=[],
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  CPPPATH=["OCC"]+additionalIncludePaths+includeDirs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons())
if Dist.getSystem()[0] == 'mingw':
	env.Replace(CXXFLAGS=Dist.getCppArgs()+['-DWNT', '-fpermissive', '-DM_PI=3.14159265359', '-D_finite=finitef', '-Dfinite=finitef'])
else:
	env.Replace(CXXFLAGS=Dist.getCppArgs())

env.Replace(CFLAGS=Dist.getCArgs())

ELSAPROD = os.environ.get('ELSAPROD', 'x86_r8')
env.SConsignFile('build/'+ELSAPROD+'/.sconsign.dblite')

#==============================================================================

occ_cassiopee = env.StaticLibrary('occ_cassiopee', srcs.srcs)
TKernel = env.StaticLibrary('TKernel', srcs.TKernel_srcs)
TKMath = env.StaticLibrary('TKMath', srcs.TKMath_srcs)
TKGeomBase = env.StaticLibrary('TKGeomBase', srcs.TKGeomBase_srcs)
TKG2d = env.StaticLibrary('TKG2d', srcs.TKG2d_srcs)
TKG3d = env.StaticLibrary('TKG3d', srcs.TKG3d_srcs)
TKBRep = env.StaticLibrary('TKBRep', srcs.TKBRep_srcs)
TKBRep2 = env.StaticLibrary('TKBRep2', srcs.TKBRep2_srcs)
TKGeomAlgo = env.StaticLibrary('TKGeomAlgo', srcs.TKGeomAlgo_srcs)
TKBool = env.StaticLibrary('TKBool', srcs.TKBool_srcs)
TKBool2 = env.StaticLibrary('TKBool2', srcs.TKBool2_srcs)
TKBool3 = env.StaticLibrary('TKBool3', srcs.TKBool3_srcs)
TKBool4 = env.StaticLibrary('TKBool4', srcs.TKBool4_srcs)
TKPrim = env.StaticLibrary('TKPrim', srcs.TKPrim_srcs)
TKShHealing = env.StaticLibrary('TKShHealing', srcs.TKShHealing_srcs)
TKTopAlgo = env.StaticLibrary('TKTopAlgo', srcs.TKTopAlgo_srcs)
TKXSBase = env.StaticLibrary('TKXSBase', srcs.TKXSBase_srcs)
TKIGES = env.StaticLibrary('TKIGES', srcs.TKIGES_srcs)
#TKSTEP = env.StaticLibrary('TKSTEP', srcs.TKSTEP_srcs)
#TKSTEP2 = env.StaticLibrary('TKSTEP2', srcs.TKSTEP2_srcs)

modDir = installPath+'/OCC/'
dp0 = env.Install(modDir, occ_cassiopee)
dp1 = env.Install(modDir, TKernel)
dp2 = env.Install(modDir, TKMath)
dp3 = env.Install(modDir, TKGeomBase)
dp4 = env.Install(modDir, TKG2d)
dp5 = env.Install(modDir, TKG3d)
dp6 = env.Install(modDir, TKBRep)
dp6a = env.Install(modDir, TKBRep2)
dp7 = env.Install(modDir, TKGeomAlgo)
dp8 = env.Install(modDir, TKBool)
dp8a = env.Install(modDir, TKBool2)
dp8b = env.Install(modDir, TKBool3)
dp8c = env.Install(modDir, TKBool4)
dp9 = env.Install(modDir, TKPrim)
dp10 = env.Install(modDir, TKShHealing)
dp11 = env.Install(modDir, TKTopAlgo)
dp12 = env.Install(modDir, TKXSBase)
dp13 = env.Install(modDir, TKIGES)
#dp14 = env.Install(modDir, TKSTEP)
#dp15 = env.Install(modDir, TKSTEP2)
dp = env.Install(modDir, Glob('OCC/*.py'))

if OCEPresent:
        env.Alias(target="install", source=[dp0,dp])
else:
        env.Alias(target="install", source=[dp0,dp1,dp2,dp3,dp4,dp5,dp6,dp6a,dp7,dp8,dp8a,dp8b,dp8c,dp9,dp10,dp11,dp12,dp13,dp])
