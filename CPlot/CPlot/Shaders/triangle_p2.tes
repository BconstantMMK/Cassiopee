#version 400 compatibility

uniform int patch_size;

layout( triangles, equal_spacing, ccw ) in;

in TCS_OUT
{
    vec4 position;
    vec4 color;
    ivec4 data_comp; // Raconte si vdata1,2,3 ou 4 est utilise
    vec4 vdata1, vdata2, vdata3, vdata4;    
} tcs_in[];


out V2F_OUT
{
    vec4 position;
    vec4 mv_position;
    vec4 mvp_position;
    vec4 view_normal;
    vec4 nrm_view_normal;
    vec4 color;
    vec4 vdata1, vdata2, vdata3, vdata4;
} v2f_out;

void interpolate_p2()
{
    vec3 p0 = gl_in[0].gl_Position.xyz;
    vec3 p1 = gl_in[1].gl_Position.xyz;
    vec3 p2 = gl_in[2].gl_Position.xyz;
    vec3 p3 = gl_in[3].gl_Position.xyz;
    // Inversion gmsh par rapport a mon document...
    vec3 p4 = gl_in[5].gl_Position.xyz;
    vec3 p5 = gl_in[4].gl_Position.xyz;

    vec3 a00 = p0;
    vec3 a10 = -3. * p0 - p1 + 4. * p3;
    vec3 a01 = -3. * p0 - p2 + 4. * p4;
    vec3 a11 =  4. * p0 - 4. * p3 - 4. * p4 + 4. * p5;
    vec3 a20 =  2. * p0 + 2. * p1 - 4. * p3;
    vec3 a02 =  2. * p0 + 2. * p2 - 4. * p4;


    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;
    // vertex en coordonnees modele...
    vec4 xyz = vec4(a00 + u*a10 + v*a01 + u*v*a11 + u*u*a20 + v*v*a02,1);
    vec3 dx  = a10 + v*a11 + (2*u)*a20;
    vec3 dy  = a01 + u*a11 + (2*v)*a02;
    vec3 n   = cross(dx,dy);

    v2f_out.position    = xyz;
    v2f_out.view_normal = vec4(gl_NormalMatrix * n, 0.);
}

void interpolate_p3_9()
{
    vec3 p00 = gl_in[0].gl_Position.xyz;
    vec3 p01 = gl_in[1].gl_Position.xyz;
    vec3 p02 = gl_in[2].gl_Position.xyz;
    vec3 p03 = gl_in[3].gl_Position.xyz;
    vec3 p04 = gl_in[4].gl_Position.xyz;
    vec3 p05 = gl_in[5].gl_Position.xyz;
    vec3 p06 = gl_in[6].gl_Position.xyz;
    vec3 p07 = gl_in[7].gl_Position.xyz;
    vec3 p08 = gl_in[8].gl_Position.xyz;

    /*vec3 a00 = p00;
    vec3 a10 = -(11/2.)*p00 + p01 + 9*p03 - (9/2.)*p04;
    vec3 a20 = 9*p00 - (9/2.)*p01 - (45/2.)*p03 + 18*p04;
    vec3 a30 = -(9/2.)*p00 + (9/2.)*p01 + (27/2.)*p03 - (27/2.)*p04;
    vec3 a01 = -(11/2.)*p00 + p02 - (9/2.)*p07 + 9*p08;
    vec3 a02 = 9*p00 - (9/2.)*p02 + 18*p07 - (45/2.)*p08;
    vec3 a03 = -(9/2.)*p00 + (9/2.)*p02 - (27/2.)*p07 + (27/2.)*p08;
    vec3 a11 = 27*p00 + 9*p01 + 9*p02 - (45/2.)*p03 + (9/2.)*p04 - (9/2.)*p05 - (9/2.)*p06 + (9/2.)*p07 - (45/2.)*p08;
    vec3 a21 = -(45/2.)*p00 - 9*p01 - 9*p02 + 27*p03 - (27/2.)*p04 + (27/2.)*p05 + (27/2.)*p08;
    vec3 a12 = -(45/2.)*p00 - 9*p01 - 9*p02 + (27/2.)*p03 + (27/2.)*p06 - (27/2.)*p07 + 27*p08;
*/
    vec3 a00 = p00;
    vec3 a10 = -5.5*p00 + p01 + 9*p03 - 4.5*p04;
    vec3 a01 = -5.5*p00 + p02 - 4.5*p07 + 9*p08;
    vec3 a20 = 9*p00 - 4.5*p01 - 22.5*p03 + 18*p04;
    vec3 a02 = 9*p00 - 4.5*p02 + 18*p07 - 22.5*p08;
    vec3 a21 = 4.5*p00 + 4.5*p03 - 9*p04 + 9*p05 -4.5*p06 + 4.5*p07 - 9*p08;
    vec3 a12 = 4.5*p00 - 9*p03 + 4.5*p04 - 4.5*p05 + 9*p06 - 9*p07 + 4.5*p08;
    vec3 a30 = -4.5*p00 + 4.5*p01 + 13.5*p03 - 13.5*p04;
    vec3 a03 = -4.5*p00 + 4.5*p02 - 13.5*p07 + 13.5*p08;

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    //float w = gl_TessCoord.z;
    // vertex en coordonnees modele...
    float u2 = u*u;
    float v2 = v*v;
    float uv = u*v;
    //vec4 xyz = vec4((1-u-v)*p00 +u*p01 + v*p08,1);
    vec4 xyz = vec4(a00 + u*a10 + v*a01 + u2*a20 + v2*a02 + u2*u*a30 + v2*v*a03 /*+ uv*a11 */+ u2*v*a21 + u*v2*a12 ,1);
    vec3 dx  = a10 + (2*u)*a20 + (3*u2)*a30 /*+ v*a11*/ + v2*a12 + (2*uv)*a21;
    vec3 dy  = a01 + (2*v)*a02 + (3*v2)*a03 /*+ u*a11*/ + u2*a21 + (2*uv)*a12;
    vec3 n   = cross(dx,dy);

    v2f_out.position    = xyz;
    v2f_out.view_normal = vec4(gl_NormalMatrix * n, 0.);
}

void interpolate_p3()
{
    vec3 p0 = gl_in[0].gl_Position.xyz;
    vec3 p1 = gl_in[1].gl_Position.xyz;
    vec3 p2 = gl_in[2].gl_Position.xyz;
    vec3 p3 = gl_in[3].gl_Position.xyz;
    vec3 p4 = gl_in[4].gl_Position.xyz;
    vec3 p5 = gl_in[5].gl_Position.xyz;
    vec3 p6 = gl_in[6].gl_Position.xyz;
    vec3 p7 = gl_in[7].gl_Position.xyz;
    vec3 p8 = gl_in[8].gl_Position.xyz;
    vec3 p9 = gl_in[9].gl_Position.xyz;

/*[                                                                          p00],
[                                            -11*p00/2 + p01 + 9*p03 - 9*p04/2],
[                                          9*p00 - 9*p01/2 - 45*p03/2 + 18*p04],
[                                     -9*p00/2 + 9*p01/2 + 27*p03/2 - 27*p04/2],
[                                            -11*p00/2 + p02 - 9*p07/2 + 9*p08],
[                                          9*p00 - 9*p02/2 + 18*p07 - 45*p08/2],
[                                     -9*p00/2 + 9*p02/2 - 27*p07/2 + 27*p08/2],
[18*p00 - 45*p03/2 + 9*p04/2 - 9*p05/2 - 9*p06/2 + 9*p07/2 - 45*p08/2 + 27*p09],
[                 -27*p00/2 + 27*p03 - 27*p04/2 + 27*p05/2 + 27*p08/2 - 27*p09],
[                 -27*p00/2 + 27*p03/2 + 27*p06/2 - 27*p07/2 + 27*p08 - 27*p09]*/

    vec3 a00 = p0;
    vec3 a10 = -5.5*p0 + p1 + 9*p3 - 4.5*p4;
    vec3 a20 = 9*p0 - 4.5*p1 - 22.5*p3 + 18*p4;
    vec3 a30 = -4.5*p0 + 4.5*p1 + 13.5*p3 - 13.5*p4;
    vec3 a01 = -5.5*p0 + p2 - 4.5*p7 + 9*p8;
    vec3 a02 = 9*p0 - 4.5*p2 + 18*p7 - 22.5*p8;
    vec3 a03 = -4.5*p0 + 4.5*p2 - 13.5*p7 + 13.5*p8;
    vec3 a11 = 18*p0 - 22.5*p3 + 4.5*p4 - 4.5*p5 - 4.5*p6 + 4.5*p7 - 22.5*p8 + 27*p9;
    vec3 a21 = -13.5*p0 + 27*p3 - 13.5*p4 + 13.5*p5 + 13.5*p8 - 27*p9;
    vec3 a12 = -13.5*p0 + 13.5*p3 + 13.5*p6 - 13.5*p7 + 27*p8 - 27*p9;

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;
    // vertex en coordonnees modele...
    float u2 = u*u;
    float v2 = v*v;
    float uv = u*v;
    //vec4 xyz = vec4((1-u-v)*p0+u*p1+v*p7,1);
    vec4 xyz = vec4(a00 + u*a10 + v*a01 + uv*a11 + u2*a20 + v2*a02 + u2*v*a21 + u*v2*a12 + u2*u*a30 + v2*v*a03,1);
    vec3 dx  = a10 + v*a11 + v2*a12 + (2*u)*a20 + (2*uv)*a21 + (3*u2)*a30;
    vec3 dy  = a01 + u*a11 + u2*a21 + (2*v)*a02 + (2*uv)*a12 + (3*v2)*a03;
    vec3 n  = cross(dx,dy);

    v2f_out.position    = xyz;
    v2f_out.view_normal = vec4(gl_NormalMatrix * n, 0.);
}

void interpolate_p4_12()
{
    vec3 p00 = gl_in[0].gl_Position.xyz;
    vec3 p01 = gl_in[1].gl_Position.xyz;
    vec3 p02 = gl_in[2].gl_Position.xyz;
    vec3 p03 = gl_in[3].gl_Position.xyz;
    vec3 p04 = gl_in[4].gl_Position.xyz;
    vec3 p05 = gl_in[5].gl_Position.xyz;
    vec3 p06 = gl_in[6].gl_Position.xyz;
    vec3 p07 = gl_in[7].gl_Position.xyz;
    vec3 p08 = gl_in[8].gl_Position.xyz;
    vec3 p09 = gl_in[9].gl_Position.xyz;
    vec3 p10 = gl_in[10].gl_Position.xyz;
    vec3 p11 = gl_in[11].gl_Position.xyz;

    vec3 a00 = p00;
    vec3 a10 = -(25./3.)*p00 - p01 + 16*p03 -12*p04 + (16./3.)*p05;
    vec3 a01 = -(25./3.)*p00 - p02 + (16./3.)*p09 - 12*p10 + 16*p11;
    vec3 a20 = (70./3.)*p00 + (22./3.)*p01 - (208./3.)*p03 + 76*p04 - (112./3.)*p05;
    vec3 a02 = (70./3.)*p00 + (22./3.)*p02 - (112./3.)*p09 + 76*p10 - (208./3.)*p11;
    vec3 a30 = -(80./3.)*p00 - 16*p01 + 96*p03 - 128*p04 + (224./3.)*p05;
    vec3 a03 = -(80./3.)*p00 - 16*p02 + (224./3.)*p09 - 128*p10 + 96*p11;
    vec3 a31 = (28./3.)*p00 - (16./3.)*p03 + 12*p04 - 16*p05 + 16*p06 - 12*p07 + (16./3.)*p08 - (16./3.)*p09 + 12*p10 - 16*p11;
    vec3 a22 = -(8./3.)*p00 + (64./3.)*p03 - 40*p04 + (64./3.)*p05 - (64./3.)*p06 + 40*p07 - (64./3.)*p08 + (64./3.)*p09 - 40*p10 + (64./3.)*p11;
    vec3 a13 = (28./3.)*p00 - 16*p03 + 12*p04 - (16./3.)*p05 + (16./3.)*p06 - 12*p07 + 16*p08 - 16*p09 + 12*p10 - (16./3.)*p11;
    vec3 a40 = (32./3.)*p00 + (32./3.)*p01 - (128./3.)*p03 + 64*p04 - (128./3.)*p05;
    vec3 a04 = (32./3.)*p00 + (32./3.)*p02 - (128./3.)*p09 + 64*p10 - (128./3.)*p11;
    
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;
    // vertex en coordonnees modele...
    float u2 = u*u;
    float u3 = u2*u;
    float v2 = v*v;
    float v3 = v2*v;
    float uv = u*v;
    
    vec4 xyz = vec4(a00 + u*a10 + v*a01 + u2*a20 + v2*a02 + u3*a30 + v3*a03 + u3*v*a31 + u2*v2*a22 + u*v3*a13 + u2*u2*a40 + v2*v2*a04,1);
    vec3 dx  = a10 + v3*a13 + (2*u)*(a20+v2*a22) + (3*u2)*(a30+v*a31) + 4*u3*a40;
    vec3 dy  = a01 + u3*a31 + (2*v)*(a02+u2*a22) + (3*v2)*(a03+u*a13) + 4*v3*a04;
    vec3 n = cross(dx,dy);

    v2f_out.position    = xyz;
    v2f_out.view_normal = vec4(gl_NormalMatrix * n, 0.);    
}

void interpolate_p4_15()
{
    vec3 p00 = gl_in[0].gl_Position.xyz;
    vec3 p01 = gl_in[1].gl_Position.xyz;
    vec3 p02 = gl_in[2].gl_Position.xyz;
    vec3 p03 = gl_in[3].gl_Position.xyz;
    vec3 p04 = gl_in[4].gl_Position.xyz;
    vec3 p05 = gl_in[5].gl_Position.xyz;
    vec3 p06 = gl_in[6].gl_Position.xyz;
    vec3 p07 = gl_in[7].gl_Position.xyz;
    vec3 p08 = gl_in[8].gl_Position.xyz;
    vec3 p09 = gl_in[9].gl_Position.xyz;
    vec3 p10 = gl_in[10].gl_Position.xyz;
    vec3 p11 = gl_in[11].gl_Position.xyz;
    vec3 p12 = gl_in[12].gl_Position.xyz;
    vec3 p13 = gl_in[13].gl_Position.xyz;
    vec3 p14 = gl_in[14].gl_Position.xyz;

    vec3 a00 = p00;
    vec3 a10 = -(25./3.)*p00 - p01 + 16*p03 - 12*p04 + (16./3.)*p05;
    vec3 a01 = -(25./3.)*p00 - p02 + (16./3.)*p09 - 12*p10 + 16*p11;
    vec3 a20 = (70./3.)*p00 + (22./3.)*p01 - (208./3.)*p03 + 76*p04 - (112./3.)*p05;
    vec3 a02 = (70./3.)*p00 + (22./3.)*p02 - (112./3.)*p09 + 76*p10 - (208./3.)*p11;
    vec3 a30 = -(80./3.)*p00 - 16*p01 + 96*p03 - 128*p04 + (224./3.)*p05;
    vec3 a03 = -(80./3.)*p00 - 16*p02 + (224./3.)*p09 - 128*p10 + 96*p11;
    vec3 a31 = (128./3.)*p00 - 128*p03 + 128*p04 - (128./3.)*p05 + (128./3.)*p06 - (128./3.)*p11 + 128*p12 - 128*p13;
    vec3 a22 = 64*p00 - 128*p03 + 64*p04 + 64*p07 + 64*p10 - 128*p11 + 256*p12 - 128*p13 - 128*p14;
    vec3 a13 = (128./3.)*p00 - (128./3.)*p03 + (128./3.)*p08 - (128./3.)*p09 + 128*p10 - 128*p11 + 128*p12 - 128*p14;
    vec3 a40 = (32./3.)*p00 + (32./3.)*p01 - (128./3.)*p03 + 64*p04 - (128./3.)*p05;
    vec3 a04 = (32./3.)*p00 + (32./3.)*p02 - (128./3.)*p09 + 64*p10 - (128./3.)*p11;
    vec3 a11 = (140./3.)*p00 - (208./3.)*p03 + 28*p04 - (16./3.)*p05 + (16./3.)*p06 + 4*p07 + (16./3.)*p08 - (16./3.)*p09 + 28*p10 - (208./3.)*p11 +
                96*p12 - 32*p13 - 32*p14;
    vec3 a21 = -80*p00 + 192*p03 - 144*p04 + 32*p05 - 32*p06 - 16*p07 - 16*p10 + 96*p11 - 224*p12 + 160*p13 + 32*p14;
    vec3 a12 = -80*p00 + 96*p03 - 16*p04 - 16*p07 - 32*p08 + 32*p09 - 144*p10 + 192*p11 - 224*p12 + 32*p13 + 160*p14;

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;
    // vertex en coordonnees modele...
    float u2 = u*u;
    float u3 = u2*u;
    float v2 = v*v;
    float v3 = v2*v;
    float uv = u*v;
    
    vec4 xyz = vec4(a00 + u*a10 + v*a01 + uv*a11 + u2*a20 + v2*a02 + u2*v*a21 + u*v2*a12 + u3*a30 + v3*a03 + u3*v*a31 + u2*v2*a22 + u*v3*a13 + u2*u2*a40 + v2*v2*a04,1);
    vec3 dx = a10 + v*a11 + v2*a12 + v3*a13 + (2*u)*(a20 + v*a21 + v2*a22) + (3*u2)*(a30 + v*a31) + (4*u3)*a40;
    vec3 dy = a01 + u*a11 + u2*a21 + u3*a31 + (2*v)*(a02 + u*a12 + u2*a22) + (3*v2)*(a03 + u*a13) + (4*v3)*a04;
    vec3 n = cross(dx,dy);

    v2f_out.position    = xyz;
    v2f_out.view_normal = vec4(gl_NormalMatrix * n, 0.);    
}

void main()
{
    if (patch_size == 6) interpolate_p2();
    if (patch_size == 9) interpolate_p3_9();
    if (patch_size ==10) interpolate_p3();
    if (patch_size ==12) interpolate_p4_12();
    if (patch_size ==15) interpolate_p4_15();

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    v2f_out.mv_position = gl_ModelViewMatrix * v2f_out.position;
    v2f_out.mvp_position = gl_ModelViewProjectionMatrix * v2f_out.position;
    v2f_out.nrm_view_normal = normalize(v2f_out.view_normal);
    // Pour la couleur, sans doute a changer, il faut voir quel est la fonction de forme associee
    // Ce sera surement une fonction dans un fichier a rajouter au programme de tesselation shader
    vec4  c0 = tcs_in[0].color;
    vec4  c1 = tcs_in[1].color;
    vec4  c2 = tcs_in[2].color;
    v2f_out.color       = u * c1 + v * c2 + w * c0;
    // Les interpolations suivantes surement aussi a changer selon une fonction bien definie
    // qu'on nommera par exemple : interpol_data1, interpol_data2, interpol_data3 et
    // interpol_data4...
    // Par defaut, on fera une interpolation lineaire par rapport aux sommets.
    if ( tcs_in[0].data_comp.x == 1 )
        v2f_out.vdata1 = u * tcs_in[1].vdata1 + v * tcs_in[2].vdata1 + w * tcs_in[0].vdata1;
    if ( tcs_in[0].data_comp.y == 1 )
        v2f_out.vdata2 = u * tcs_in[1].vdata2 + v * tcs_in[2].vdata2 + w * tcs_in[0].vdata2;
    if ( tcs_in[0].data_comp.z == 1 )
        v2f_out.vdata3 = u * tcs_in[1].vdata3 + v * tcs_in[2].vdata3 + w * tcs_in[0].vdata3;
    if ( tcs_in[0].data_comp.w == 1 )
        v2f_out.vdata4 = u * tcs_in[1].vdata4 + v * tcs_in[2].vdata4 + w * tcs_in[0].vdata4;

    // gl_position en repere camera projetee
    gl_Position = gl_ModelViewProjectionMatrix * v2f_out.position;
}
