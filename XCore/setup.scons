import distutils.sysconfig, os
import KCore.Dist as Dist
from KCore.config import *
#==============================================================================
# XCore requires:
# C++ compiler
# Numpy, MPI
# KCore library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists =======================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

from KCore.config import *

# Test if libmpi exists ======================================================
(mpi, mpiIncDir, mpiLibDir, mpiLibs) = Dist.checkMpi(additionalLibPaths,
                                                     additionalIncludePaths)
(mpi4py, mpi4pyIncDir, mpi4pyLibDir) = Dist.checkMpi4py(additionalLibPaths,
                                                        additionalIncludePaths)

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir]
includeDirs = [numpyIncDir, kcoreIncDir, pythonIncDir]
libraries = ["xcore"]

ADDITIONALCPPFLAGS = []
if mpi:
    libraryDirs.append(mpiLibDir)
    includeDirs.append(mpiIncDir)
    ADDITIONALCPPFLAGS = ['-D_MPI']
if mpi4py:
    includeDirs.append(mpiIncDir)
if mpi: libraries += mpiLibs

(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

# Options for scotch
opt1 =['-DCOMMON_FILE_COMPRESS_GZ','-DCOMMON_PTHREAD','-DCOMMON_RANDOM_FIXED_SEED',
       '-DSCOTCH_RENAME','-DIDXSIZE64',
       '-DSCOTCH_VERSION_NUM=6','-DSCOTCH_RELEASE_NUM=0','-DSCOTCH_PATCHLEVEL_NUM=6']
opt1_1 = ['-DSCOTCH_PTSCOTCH'] 
if Dist.GDOUBLEINT: opt1 += ['-DINTSIZE64']
else: opt1 += ['-DINTSIZE32']
if cc == 'gcc': opt1 += [] # ['-Wrestrict']
else: opt1 += ['-restrict']

# Options for paradigma - paradigma install path
PPATH = 'XCore/paradigma'
opt2 = ['-I%s'%PPATH,'-I%s/mpi_wrapper'%PPATH,'-I%s/mesh'%PPATH,'-I%s/util'%PPATH,'-I%s/io'%PPATH,'-I%s/ppart'%PPATH,'-I%s/struct'%PPATH,'-I%s/pario'%PPATH,'-I%s/ext_wrapper'%PPATH]
opt2 += ['-IXCore/scotch']
opt2 += ['-std=c99', '-DSCOTCH_RENAME']
#opt2 +=['-DPDM_HAVE_PTSCOTCH','-DPDM_ENABLE_ANISO_AGGLO=0']

ADDITIONALCPPFLAGS += opt1 + ['-IXCore', '-IXCore/scotch']
ADDITIONALCFLAGS = ADDITIONALCPPFLAGS+opt2+['-DSCOTCH_RENAME']

# Env =========================================================================
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None

AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CPPFLAGS=[],
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons(),
                  CPPPATH=["XCore","XCore/CMP/include"]+additionalIncludePaths+includeDirs,
                  CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS,
                  CFLAGS=Dist.getCArgs()+ADDITIONALCFLAGS)

ELSAPROD = os.environ.get('ELSAPROD', 'x86_r8')
env.SConsignFile('build/'+ELSAPROD+'/.sconsign.dblite')
            
import srcs
import srcs_scotch
import srcs_paradigma

# suppression mpi ou no_mpi pour paradigma
if mpi:
  src_paradigma = [x for x in srcs_paradigma.cpp_srcs if not 'mpi_wrapper/no_mpi' in x]
else:
  src_paradigma = [x for x in srcs_paradigma.cpp_srcs if not 'mpi_wrapper/mpi' in x]

# Verifie si paradigma est deja installe, si oui, on prend la version installee de la lib
#(pdm, pdmIncDir, pdmLibDir) = Dist.checkParadigma(additionalLibPaths, additionalIncludePaths)
#if pdm: myMod2 = None
#else:
#  # Verifie si la bibliotheque a ete downloadee dans ThirdParty
#  paths2 = '../../XCore/paradigma' # local link
#  if os.path.exists(paths2): myMod2 = env.StaticLibrary('pdm', src_paradigma)
#  else: print('Warning: paradigma not present.'); myMod2 = None

# Force no pdm
#myMod2 = None
srcs_pdm = []
for i in src_paradigma:
    srcs_pdm.append('%s/%s'%(PPATH,i))
myMod2 = env.StaticLibrary('pdm', srcs_pdm)

myMod = env.StaticLibrary('xcore', srcs.cpp_srcs)
myMod3 = env.StaticLibrary('scotch1', srcs_scotch.cpp_srcs1[0:99])
myMod3b = env.StaticLibrary('scotch2', srcs_scotch.cpp_srcs1[99:])

modDir = 'build/'+ELSAPROD
dp1 = env.Install(modDir, myMod)
dp3 = env.Install(modDir, myMod3)
dp3b = env.Install(modDir, myMod3b)

if mpi:
  env_pt = env.Clone(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS+opt1_1, CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS+opt1_1)
  dp2 = env_pt.Install(modDir, myMod2)
  myMod4 = env_pt.StaticLibrary('ptscotch', srcs_scotch.cpp_srcs2)
  dp4 = env.Install(modDir, myMod4)
  env.Alias(target="install", source=[dp1,dp2,dp3,dp3b,dp4])
else:
  dp2 = env.Install(modDir, myMod2)
  env.Alias(target="install", source=[dp1,dp2,dp3,dp3b])
