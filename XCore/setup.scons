import distutils.sysconfig, os
import KCore.Dist as Dist
from KCore.config import *
#==============================================================================
# XCore requires:
# C++ compiler
# Numpy, MPI
# KCore library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists =======================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

from KCore.config import *

# Test if libmpi exists ======================================================
(mpi, mpiIncDir, mpiLibDir) = Dist.checkMpi(additionalLibPaths,
                                            additionalIncludePaths)
(mpi4py, mpi4pyIncDir, mpi4pyLibDir) = Dist.checkMpi4py(additionalLibPaths,
                                                        additionalIncludePaths)

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir]
includeDirs = [numpyIncDir, kcoreIncDir, pythonIncDir]
libraries = ["xcore"]

ADDITIONALCPPFLAGS = []
if mpi and mpi4py:
    libraryDirs.append(mpiLibDir)
    includeDirs.append(mpiIncDir)
    includeDirs.append(mpi4pyIncDir)
    ADDITIONALCPPFLAGS = ['-D_MPI']
if mpi:
    if Dist.getSystem()[0] == 'mingw': libraries.append('msmpi')
    else: libraries.append('mpi')

(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

# Options for scotch
opts =['-DCOMMON_FILE_COMPRESS_GZ','-DCOMMON_PTHREAD','-DCOMMON_RANDOM_FIXED_SEED',
       '-DSCOTCH_RENAME','-DSCOTCH_PTHREAD','-restrict','-DIDXSIZE64',
       '-DSCOTCH_VERSION_NUM=6','-DSCOTCH_RELEASE_NUM=0','-DSCOTCH_PATCHLEVEL_NUM=6']
# options for paradigma
opt2 = ['-IXCore/paradigma','-IXCore/paradigma/mpi_wrapper','-IXCore/paradigma/mesh','-IXCore/paradigma/util','-IXCore/paradigma/io','-IXCore/paradigma/ppart','-IXCore/paradigma/struct','-IXCore/paradigma/pario','-IXCore/paradigma/ext_wrapper']
opt2 += ['-std=c99']
#opt2 +=['-DPDM_HAVE_PTSCOTCH','-DPDM_ENABLE_ANISO_AGGLO=0']
#ADDITIONALCPPFLAGS += opts + opt2
ADDITIONALCPPFLAGS += opt2
# Env =========================================================================
import srcs
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None

AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CPPFLAGS=[],
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons())

env.Replace(CPPPATH=["XCore"]+additionalIncludePaths+includeDirs)
env.Replace(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS)
env.Replace(CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS)
            
myMod = env.StaticLibrary('xcore', srcs.cpp_srcs)
myMod2 = env.StaticLibrary('scotch', srcs.cpp_srcs1)
myMod3 = env.StaticLibrary('paradigma', srcs.cpp_srcs2)

modDir = installPath+'/XCore/'
dp1 = env.Install(modDir, myMod)
dp2 = env.Install(modDir, myMod2)
dp3 = env.Install(modDir, myMod3)
dp4 = env.Install(modDir, Glob('XCore/*.py'))
#env.Alias(target="install", source=[dp1,dp2,dp3,dp4])
env.Alias(target="install", source=[dp1,dp3,dp4])
