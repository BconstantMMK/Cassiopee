/**
 * @brief Calcul du rotationnel de la vitesse pour diff√©rents types de cellules
 *
 * On calcul le rotationnel moyenn√© sur une cellule √† l'aide du th√©or√®me du rotationnel :
 #     ‚ü∂‚Äâ‚Üí          ‚Üí    ‚Üí     ‚Üí                                         
 # ‚à≠·µ• rot‚Äâùë£ dV = -‚à¨‚Çõ ùë£ ‚àß dùë† o√π dùë† est la normale dirig√©e vers l'ext√©rieur.
 *
 * Puisque la vitesse est constante par cellule, on en d√©duit le rotationnel par :s
 *
 #  ‚ü∂‚Äâ‚Üí          n      ‚Üí     ‚Üí                                       
 # rot‚Äâùë£  = -(1/V) ‚àë ‚à¨  (v‚Çñ ‚àß dS‚Çñ)                                      
 #                k=1 S‚Çñ                                                
 * o√π V est le volume de la cellule consid√©r√©e et S‚Çñ la surface de la ki√®me interface de la cellule (qui contient n interfaces).
 *
 * Le rotationnel est donc consid√©r√© comme constant par cellule...
 */
#ifndef _K_POST_ROTATIONAL_HPP_
#define _K_POST_ROTATIONAL_HPP_
#include <vector>
#include "point3d.hpp"
#include "vector3d.hpp"
#include "face.hpp"
#include "Memory/vector_view.hpp"

namespace K_POST
{
    /**
     * @brief Calcule le rotationnel de la vitesse dans un t√©tra√®dre
     * @details Calcule le rotationnel de la vitesse dans un t√©tra√®dre
     * 
     * Soit T=(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ) un t√©tra√®dre d√©fini dans l'espace (un √©l√©ment de maillage par exemple)
     * avec des vitesses d√©finies en chaque sommet du t√©tra√®dre. On veut calculer le rotationnel de  
     * la vitesse dans le t√©tra√®dre (suppos√© constant dans toute la cellule)
     * 
     * Le t√©tra√®dre peut se d√©finir par la fonction de passage du t√©tra√®dre de r√©f√©rence au t√©tra√®dre
     * physique comme :
     * 
     # p(œà, Œ∑, Œ∂) = p‚ÇÅ + œà.E‚ÇÅ‚ÇÇ + Œ∑.E‚ÇÅ‚ÇÉ +  Œ∂.E‚ÇÅ‚ÇÑ; avec 0 ‚â§ œà+Œ∑+Œ∂ ‚â§ 1                                  
     #                   ‚éõ           ‚éû ‚éõœà‚éû          ‚éõœà‚éû                                                
     #            = p‚ÇÅ + ‚éúE‚ÇÅ‚ÇÇ;E‚ÇÅ‚ÇÉ;E‚ÇÅ‚ÇÑ‚éü.‚éúŒ∑‚éü = p‚ÇÅ + F.‚éúŒ∑‚éü                                                
     #                   ‚éù           ‚é† ‚éùŒ∂‚é†          ‚éùŒ∂‚é†                                                
     * 
     * En ce qui concerne le volume du t√©tra√®dre, voir la documentation dans volume.hpp
     * 
     *  La vitesse √©tant d√©finie uniquement sur les sommets du t√©tra√®dre, on peut l'exprimer sous la forme
     *  d'une fonction lin√©aire en œà,Œ∑ etŒ∂ :
     * 
     # v(œà, Œ∑, Œ∂) = v‚ÇÅ + œà.(v‚ÇÇ-v‚ÇÅ) + Œ∑.(v‚ÇÉ-v‚ÇÅ) +  Œ∂.(v‚ÇÑ-v‚ÇÅ); avec 0 ‚â§ œà+Œ∑+Œ∂ ‚â§ 1                      
     #                   ‚éõ              ‚éû ‚éõœà‚éû          ‚éõœà‚éû                                             
     #            = v‚ÇÅ + ‚éúŒîv‚ÇÅ‚ÇÇ;Œîv‚ÇÅ‚ÇÉ;Œîv‚ÇÅ‚ÇÑ‚éü.‚éúŒ∑‚éü = v‚ÇÅ + B.‚éúŒ∑‚éü                                             
     #                   ‚éù              ‚é† ‚éùŒ∂‚é†          ‚éùŒ∂‚é†                                             
     *
     * Calculons les int√©grales sur chaque face du t√©tra√®dre :
     * 
     * Pour la premi√®re face, le triangle T‚ÇÅ‚ÇÉ‚ÇÇ = (p‚ÇÅ, p‚ÇÉ, p‚ÇÇ), on a Œ∂ = 0 et sa normale est (contenant la surface du triangle ) 
     * 
     #      n‚ÇÅ‚ÇÉ‚ÇÇ = E‚ÇÅ‚ÇÉ ‚àß E‚ÇÅ‚ÇÇ                                                                 
     *
     * L'int√©grale vaut donc :
     * 
     #    ‚Üí  ‚Üí            1 1-Œ∑                                                               
     # ‚à¨ v‚àßn‚ÇÅ‚ÇÉ‚ÇÇ dT‚ÇÅ‚ÇÉ‚ÇÇ = ‚à´ ‚à´   [v‚ÇÅ+œà.(v‚ÇÇ-v‚ÇÅ) + Œ∑.(v‚ÇÉ-v‚ÇÅ)]‚àß[E‚ÇÅ‚ÇÉ ‚àß E‚ÇÅ‚ÇÇ] dœà dŒ∑                  
     #  T‚ÇÅ‚ÇÉ‚ÇÇ            0 0                                                                   
     #                 = (1/2)(v‚ÇÅ‚àßE‚ÇÅ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ) + (1/6)((v‚ÇÇ-v‚ÇÅ)^E‚ÇÅ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ) + (1/6)((v‚ÇÉ-v‚ÇÅ)^E‚ÇÅ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ)
     #                 = (1/6)((v‚ÇÅ+v‚ÇÇ+v‚ÇÉ)‚àßE‚ÇÅ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ)                                           
     *
     * Pour la seconde face, le triangle T‚ÇÅ‚ÇÇ‚ÇÑ = (p‚ÇÅ,p‚ÇÇ,p‚ÇÑ), on a Œ∑ = 0 et sa normale   
     * 
     #      n‚ÇÅ‚ÇÇ‚ÇÑ = E‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ                                                                    
     *
     * L'int√©grale vaut donc :
     * 
     #    ‚Üí  ‚Üí            1 1-Œ∑                                                               
     # ‚à¨ v‚àßn‚ÇÅ‚ÇÇ‚ÇÑ dT‚ÇÅ‚ÇÇ‚ÇÑ = ‚à´ ‚à´   [v‚ÇÅ+œà.(v‚ÇÇ-v‚ÇÅ) + Œ∂.(v‚ÇÑ-v‚ÇÅ)]‚àß[E‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ] dœà dŒ∂                    
     #  T‚ÇÅ‚ÇÇ‚ÇÑ            0 0                                                                   
     #                 = (1/2)(v‚ÇÅ‚àßE‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ) + (1/6)((v‚ÇÇ-v‚ÇÅ)^E‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ) + (1/6)((v‚ÇÑ-v‚ÇÅ)^E‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ)
     #                 = (1/6)((v‚ÇÅ+v‚ÇÇ+v‚ÇÑ)‚àßE‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ)                                           
     *
     * Pour la troisi√®me face, le triangle T‚ÇÇ‚ÇÉ‚ÇÑ = (p‚ÇÇ, p‚ÇÉ, p‚ÇÑ), on a œà + Œ∑ + Œ∂ = 1 soit Œ∂ = 1 - œà - Œ∑ et la normale :
     * 
     #      n‚ÇÇ‚ÇÉ‚ÇÑ = E‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÑ                                                                    
     *
     * L'int√©grale vaut donc :
     *
     #    ‚Üí  ‚Üí            1 1-Œ∑                                                               
     # ‚à¨ v‚àßn‚ÇÇ‚ÇÉ‚ÇÑ dT‚ÇÇ‚ÇÉ‚ÇÑ = ‚à´ ‚à´   [v‚ÇÅ+œà.(v‚ÇÇ-v‚ÇÅ)+ Œ∑.(v‚ÇÉ-v‚ÇÅ)+(1-œà-Œ∑).(v‚ÇÑ-v‚ÇÅ)]‚àß[E‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÑ] dœà dŒ∑     
     #  T‚ÇÇ‚ÇÉ‚ÇÑ            0 0                                                                   
     #                 = (1/6)((v‚ÇÇ+v‚ÇÉ+v‚ÇÑ)‚àßE‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÑ)                                           
     *
     * Pour la derni√®re face, le triangle T‚ÇÉ‚ÇÅ‚ÇÑ = (p‚ÇÉ,p‚ÇÅ,p‚ÇÑ), on a œà = 0 et la normale :
     * 
     #         n‚ÇÉ‚ÇÅ‚ÇÑ = E‚ÇÉ‚ÇÅ‚àßE‚ÇÉ‚ÇÑ                                                                 
     *
     * L'int√©grale vaut donc :
     * 
     #    ‚Üí  ‚Üí            1 1-Œ∑                                                               
     # ‚à¨ v‚àßn‚ÇÉ‚ÇÅ‚ÇÑ dT‚ÇÉ‚ÇÅ‚ÇÑ = ‚à´ ‚à´   [v‚ÇÅ+Œ∑.(v‚ÇÉ-v‚ÇÅ)+Œ∂.(v‚ÇÑ-v‚ÇÅ)]‚àß[E‚ÇÉ‚ÇÅ‚àßE‚ÇÉ‚ÇÑ] dŒ∑ dŒ∂                    
     #  T‚ÇÉ‚ÇÅ‚ÇÑ            0 0                                                                   
     #                 = (1/6)((v‚ÇÅ+v‚ÇÉ+v‚ÇÑ)‚àßE‚ÇÉ‚ÇÅ‚àßE‚ÇÉ‚ÇÑ)                                           
     *
     ? Le rotationnel vaut donc :
     #  ‚Üí                                                                                     
     # rot(v) = (-1/(6V)).[(v‚ÇÅ+v‚ÇÇ+v‚ÇÉ)‚àßE‚ÇÅ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ + (v‚ÇÅ+v‚ÇÇ+v‚ÇÑ)‚àßE‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ + (v‚ÇÇ+v‚ÇÉ+v‚ÇÑ)‚àßE‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÑ +  
     #                     (v‚ÇÅ+v‚ÇÉ+v‚ÇÑ)‚àßE‚ÇÉ‚ÇÅ‚àßE‚ÇÉ‚ÇÑ]                                               
     #        = (-1/(6V)).[v‚ÇÅ‚àßE‚ÇÉ‚ÇÇ‚àßE‚ÇÉ‚ÇÑ + v‚ÇÇ‚àßE‚ÇÅ‚ÇÉ‚àßE‚ÇÉ‚ÇÑ + v‚ÇÉ‚àßE‚ÇÇ‚ÇÅ‚àßE‚ÇÅ‚ÇÑ + v‚ÇÑ‚àßE‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÉ]             
     *                          
     * @param p1 Premier    sommet p‚ÇÅ du t√©tra√®dre
     * @param p2 Second     sommet p‚ÇÇ du t√©tra√®dre
     * @param p3 Troisi√®me  sommet p‚ÇÉ du t√©tra√®dre
     * @param p4 Quatri√®me  sommet p‚ÇÑ du t√©tra√®dre
     * @param v1 Vitesse au sommet p‚ÇÅ 
     * @param v2 Vitesse au sommet p‚ÇÇ
     * @param v3 Vitesse au sommet p‚ÇÉ
     * @param v4 Vitesse au sommet p‚ÇÑ
     * @return Le rotationnel constant au sein du t√©tra√®dre
     */
    vector3d compute_rotational_on_tetrahedra( const point3d& p1, const point3d& p2,
                                               const point3d& p3, const point3d& p4,
                                               const vector3d& v1, const vector3d& v2,
                                               const vector3d& v3, const vector3d& v4 );
    /**
     * @brief Calcul du rotationnel de la vitesse sur une pyramide
     * @details Calcul du rotationel de la vitese sur une pyramide dont la vitesse est d√©finie aux sommets
     * 
     * Soit une pyramide P = (p‚ÇÅ,p‚ÇÇ,p‚ÇÉ,p‚ÇÑ,p‚ÇÖ) d√©fini par ses cinq sommets, o√π (p‚ÇÅ,p‚ÇÇ,p‚ÇÉ,p‚ÇÑ) d√©finissent la base
     * de la pyramide. On d√©finit la pyramide par la fonction transformant la pyramide de r√©f√©rence en la pyramide
     * consid√©r√©e, comme dans :
     * 
     * @ref Higher-Order Finite Elements for Hybrid Meshes Using New Nodal Pyramidal Elements; Morgane Bergot, Gary Cohen 
     * @ref et Marc Durufl√©, https://hal.archives-ouvertes.fr/hal-00454261, F√©vrier 2010
     * 
     # F(œà,Œ∑,Œ∂) = (1/4)[œà.(E‚ÇÅ‚ÇÇ-E‚ÇÉ‚ÇÑ) + Œ∑.(E‚ÇÅ‚ÇÉ+E‚ÇÇ‚ÇÑ) + Œ∂.(E‚ÇÅ‚ÇÖ+E‚ÇÇ‚ÇÖ+E‚ÇÉ‚ÇÖ+E‚ÇÑ‚ÇÖ) + œàŒ∑/(1-Œ∂).(E‚ÇÇ‚ÇÉ-E‚ÇÅ‚ÇÑ)]                
     *
     ! Remarque : on a choisit de faire un changement de rep√®re en prenant pour origine le barycentre de la base
     !            de la pyramide.
     *
     * Pour le calcul du volume de la pyramide voir :
     * @ref volume.hpp
     * En ce qui concerne la vitesse d√©finie en chaque sommet de la pyramide, on peut l'exprimer par une fonction
     * l'interpolant dans la pyramide :
     * 
     # v(œà,Œ∑,Œ∂) = (1/4)[v‚ÇÅ+v‚ÇÇ+v‚ÇÉ+v‚ÇÑ + œà.(v‚ÇÇ+v‚ÇÉ-v‚ÇÅ-v‚ÇÑ) + Œ∑.(v‚ÇÉ+v‚ÇÑ-v‚ÇÅ-v‚ÇÇ) +      
     #                  Œ∂.(4.v‚ÇÖ-v‚ÇÅ-v‚ÇÇ-v‚ÇÉ-v‚ÇÑ) + œàŒ∑/(1-Œ∂).(v‚ÇÉ+v‚ÇÅ-v‚ÇÇ-v‚ÇÑ)]         
     * 
     * Calculons les int√©grales sur chaque face de la pyramide :
     * 
     * Pour le quadrangle Q‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ=(p‚ÇÅ, p‚ÇÑ, p‚ÇÉ, p‚ÇÇ), on impose Œ∂=0 et la normale est d√©finie comme :
     * 
     #      n‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ = (1/16)[E‚ÇÅ‚ÇÉ+E‚ÇÇ‚ÇÑ + œà.(E‚ÇÇ‚ÇÉ+E‚ÇÑ‚ÇÅ)] ‚àß [E‚ÇÅ‚ÇÇ+E‚ÇÑ‚ÇÉ + Œ∑.(E‚ÇÇ‚ÇÉ+E‚ÇÑ‚ÇÅ)]   
     #            = (1/8)[E‚ÇÇ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ + œà.E‚ÇÑ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ + Œ∑.E‚ÇÅ‚ÇÑ‚àßE‚ÇÇ‚ÇÉ]                   
     *
     * On a donc :
     * 
     #    ‚Üí   ‚Üí                 1  1                                           
     # ‚à¨ v‚àßn‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ dQ‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ =(1/32)‚à´ ‚à´[v‚ÇÅ+v‚ÇÇ+v‚ÇÉ+v‚ÇÑ+œà(v‚ÇÇ+v‚ÇÉ-v‚ÇÅ-v‚ÇÑ)+Œ∑(v‚ÇÉ+v‚ÇÑ-v‚ÇÅ-v‚ÇÇ) +
     #  Q‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ                 -1 -1 œàŒ∑(v‚ÇÉ+v‚ÇÅ-v‚ÇÇ-v‚ÇÑ)]‚àß[E‚ÇÇ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ + œà.E‚ÇÑ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ   + 
     #                                                  Œ∑.E‚ÇÅ‚ÇÑ‚àßE‚ÇÇ‚ÇÉ] dœà dŒ∑       
     #                 = (1/8){v‚ÇÅ‚àß[E‚ÇÇ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ+(1/3)E‚ÇÉ‚ÇÑ‚àßE‚ÇÅ‚ÇÇ+(1/3)E‚ÇÑ‚ÇÅ‚àßE‚ÇÇ‚ÇÉ)        +
     #                         v‚ÇÇ‚àß[E‚ÇÇ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ+(1/3)E‚ÇÑ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ+(1/3)E‚ÇÑ‚ÇÅ‚àßE‚ÇÇ‚ÇÉ]        +
     #                         v‚ÇÉ‚àß[E‚ÇÇ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ+(1/3)E‚ÇÑ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ+(1/3)E‚ÇÅ‚ÇÑ‚àßE‚ÇÇ‚ÇÉ]        +
     #                         v‚ÇÑ‚àß[E‚ÇÇ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ+(1/3)E‚ÇÉ‚ÇÑ‚àßE‚ÇÅ‚ÇÇ+(1/3)E‚ÇÅ‚ÇÑ‚àßE‚ÇÇ‚ÇÉ]}  
     *
     * Pour le triangle T‚ÇÅ‚ÇÇ‚ÇÖ, on impose Œ∑=-1+Œ∂, et la normale vaut :
     * 
     #      n‚ÇÅ‚ÇÇ‚ÇÖ = (1/2)E‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÖ                                                
     *
     * On a donc :
     * 
     #    ‚Üí  ‚Üí               1  1-Œ∂                                             
     # ‚à¨ v‚àßn‚ÇÅ‚ÇÇ‚ÇÖ dT‚ÇÅ‚ÇÇ‚ÇÖ=(1/4)‚à´  ‚à´ [v‚ÇÅ+v‚ÇÇ+œà(v‚ÇÇ-v‚ÇÅ)+Œ∂(2v‚ÇÖ-v‚ÇÅ-v‚ÇÇ)]‚àß[E‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÖ] dœà dŒ∂
     #  T‚ÇÅ‚ÇÇ‚ÇÖ               0 -1+Œ∂                                              
     #                 = (1/6)(v‚ÇÅ‚àßE‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÖ+v‚ÇÇ‚àßE‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÖ+v‚ÇÖ‚àßE‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÖ)             
     * 
     * Pour le triangle T‚ÇÇ‚ÇÉ‚ÇÖ, on impose œà= 1-Œ∂ et la normale vaut :
     * 
     #      n‚ÇÇ‚ÇÉ‚ÇÖ = (1/2)E‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÖ                                                
     * 
     * On a donc :
     * 
     #    ‚Üí   ‚Üí              1  1-Œ∂                                            
     # ‚à¨ v‚àßn‚ÇÇ‚ÇÉ‚ÇÖ dT‚ÇÇ‚ÇÉ‚ÇÖ=(1/4)‚à´  ‚à´ [v‚ÇÇ+v‚ÇÉ+Œ∑(v‚ÇÉ-v‚ÇÇ)+Œ∂(2v‚ÇÖ-v‚ÇÇ-v‚ÇÉ)]‚àß[E‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÖ] dŒ∑ dŒ∂
     #  T‚ÇÇ‚ÇÉ‚ÇÖ               0 -1+Œ∂                                              
     #                =(1/6)(v‚ÇÇ‚àßE‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÖ+v‚ÇÉ‚àßE‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÖ+v‚ÇÖ‚àßE‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÖ)              
     * 
     * Pour le triangle T‚ÇÉ‚ÇÑ‚ÇÖ, on impose Œ∑=+1-Œ∂ et la normale vaut :
     * 
     #     n‚ÇÉ‚ÇÑ‚ÇÖ = (1/2)E‚ÇÉ‚ÇÑ‚àßE‚ÇÉ‚ÇÖ                                                 
     * 
     * On a donc :
     * 
     #    ‚Üí  ‚Üí               1  1-Œ∂                                            
     # ‚à¨ v‚àßn‚ÇÉ‚ÇÑ‚ÇÖ dT‚ÇÉ‚ÇÑ‚ÇÖ=(1/4)‚à´  ‚à´ [v‚ÇÉ+v‚ÇÑ+œà(v‚ÇÉ-v‚ÇÑ)+Œ∂(2v‚ÇÖ-v‚ÇÉ-v‚ÇÑ)]‚àß[E‚ÇÉ‚ÇÑ‚àßE‚ÇÉ‚ÇÖ] dœà dŒ∂
     #  T‚ÇÉ‚ÇÑ‚ÇÖ               0 -1+Œ∂                                              
     #                =(1/6)(v‚ÇÉ‚àßE‚ÇÉ‚ÇÑ‚àßE‚ÇÉ‚ÇÖ+v‚ÇÑ‚àßE‚ÇÉ‚ÇÑ‚àßE‚ÇÉ‚ÇÖ+v‚ÇÖ‚àßE‚ÇÉ‚ÇÑ‚àßE‚ÇÉ‚ÇÖ)
     * 
     * Pour le triangle T‚ÇÑ‚ÇÅ‚ÇÖ, on impose œà=-1+Œ∂ et la normale vaut :
     * 
     #     n‚ÇÑ‚ÇÅ‚ÇÖ = (1/2)E‚ÇÑ‚ÇÅ‚àßE‚ÇÑ‚ÇÖ                                                 
     *         
     * On a donc :
     * 
     #    ‚Üí  ‚Üí                1  1-Œ∂                                            
     # ‚à¨ v‚àßn‚ÇÑ‚ÇÅ‚ÇÖ.dT‚ÇÑ‚ÇÅ‚ÇÖ =(1/4)‚à´  ‚à´ [v‚ÇÅ+v‚ÇÑ+Œ∑(v‚ÇÑ-v‚ÇÅ)+Œ∂(2v‚ÇÖ-v‚ÇÅ-v‚ÇÑ)]‚àß[E‚ÇÑ‚ÇÅ‚àßE‚ÇÑ‚ÇÖ] dŒ∑ dŒ∂
     #  T‚ÇÑ‚ÇÅ‚ÇÖ                0 -1+Œ∂                                              
     #                 =(1/6)(v‚ÇÅ‚àßE‚ÇÑ‚ÇÅ‚àßE‚ÇÑ‚ÇÖ+v‚ÇÑ‚àßE‚ÇÑ‚ÇÅ‚àßE‚ÇÑ‚ÇÖ+v‚ÇÖ‚àßE‚ÇÑ‚ÇÅ‚àßE‚ÇÑ‚ÇÖ)              
     * 
     ? On en d√©duit le rotationnel comme :
     * 
     #   ‚Üí                                                                     
     # rot(v) = (-1/(24V)).[3(v‚ÇÅ+v‚ÇÇ+v‚ÇÉ+v‚ÇÑ)‚àßE‚ÇÇ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ + (v‚ÇÅ-v‚ÇÇ-v‚ÇÉ+v‚ÇÑ)‚àßE‚ÇÉ‚ÇÑ‚àßE‚ÇÅ‚ÇÇ  +
     #                       (v‚ÇÅ+v‚ÇÇ-v‚ÇÉ-v‚ÇÑ)‚àßE‚ÇÑ‚ÇÅ‚àßE‚ÇÇ‚ÇÉ + 4(v‚ÇÅ+v‚ÇÇ+v‚ÇÖ)‚àßE‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÖ    +
     #                       4(v‚ÇÇ+v‚ÇÉ+v‚ÇÖ)‚àßE‚ÇÇ‚ÇÉ‚àßE‚ÇÇ‚ÇÖ + 4(v‚ÇÉ+v‚ÇÑ+v‚ÇÖ)‚àßE‚ÇÉ‚ÇÑ‚àßE‚ÇÉ‚ÇÖ      +
     #                       4(v‚ÇÅ+v‚ÇÑ+v‚ÇÖ)‚àßE‚ÇÑ‚ÇÅ‚àßE‚ÇÑ‚ÇÖ]
     * 
     * o√π V est le volume de la pyramide
     * 
     * @param p1 Premier   sommet p‚ÇÅ de la pyramide
     * @param p2 Second    sommet p‚ÇÇ de la pyramide
     * @param p3 Troisi√®me sommet p‚ÇÉ de la pyramide
     * @param p4 Quatri√®me sommet p‚ÇÑ de la pyramide
     * @param p5 Cinqui√®me sommet p‚ÇÖ de la pyramide
     * @param v1 Valeur de la vitesse au sommet p‚ÇÅ
     * @param v2 Valeur de la vitesse au sommet p‚ÇÇ
     * @param v3 Valeur de la vitesse au sommet p‚ÇÉ
     * @param v4 Valeur de la vitesse au sommet p‚ÇÑ
     * @param v5 Valeur de la vitesse au sommet p‚ÇÖ
     * @return La valeur du rotationnel (constant) dans la pyramide
     */
    vector3d compute_rotational_on_pyramid( const point3d& p1, const point3d& p2,
                                            const point3d& p3, const point3d& p4, const point3d& p5,
                                            const vector3d& v1, const vector3d& v2,
                                            const vector3d& v3, const vector3d& v4, const vector3d& v5 );
    /**
     * @brief Calcul du rotationnel de la vitesse dans une cellule penta√®drique
     * @details Calcul le rotationnel de la vitesse dans une cellule penta√®drique avec les vitesses d√©finies aux sommets.
     * 
     * Soit un penta√®dre P=(p‚ÇÅ,p‚ÇÇ,p‚ÇÉ,p‚ÇÑ,p‚ÇÖ,p‚ÇÜ) dont les sommets sont ordonn√©s selon la norme CGNS.
     * Pour la simplification des calculs, on peut supposer que le sommet p‚ÇÅ est √† l'origine du rep√®re,
     * quitte √† faire une translation du rep√®re cart√©sien pour le besoin.
     * 
     * Le penta√®dre peut √™tre d√©crit √† l'aide d'une fonction transformant le penta√®dre de r√©f√©rence dans le penta√®dre
     * P √† l'aide de trois param√®tres œà,Œ∑,Œ∂ :
     * 
     #         œï : [0;1]¬≥ ----> ‚Ñù¬≥                                                                         
     #             œà,Œ∑,Œ∂  ----> œà.E‚ÇÅ‚ÇÇ + Œ∑.E‚ÇÅ‚ÇÉ + Œ∂.E‚ÇÅ‚ÇÑ + œàŒ∂.(E‚ÇÑ‚ÇÖ + E‚ÇÇ‚ÇÅ) + Œ∑Œ∂.(E‚ÇÑ‚ÇÜ + E‚ÇÉ‚ÇÅ) avec 0 ‚â§ œà + Œ∑ ‚â§ 1 
     *             
     * o√π E·µ¢‚±º d√©finit le vecteur ayant pour origine le sommet p·µ¢ et pour extr√©mit√© le sommet p‚±º.
     * 
     * La vitesse √©tant d√©finie en chaque sommet du penta√®dre, on peut interpoler la vitesse au sein de penta√®dre
     * √† l'aide de la fonction polynomiale :
     * 
     # v(œà,Œ∑,Œ∂) = v‚ÇÅ + œà(v‚ÇÇ-v‚ÇÅ) + Œ∑(v‚ÇÉ-v‚ÇÅ) + Œ∂(v‚ÇÑ-v‚ÇÅ) + œàŒ∂(v‚ÇÅ+v‚ÇÖ-v‚ÇÇ-v‚ÇÑ) + Œ∑Œ∂(v‚ÇÅ+v‚ÇÜ-v‚ÇÉ-v‚ÇÑ)                 
     * 
     * Nous allons calculer le rotationnel en utilisant le th√©or√®me du rotationnel.
     * Calculons les int√©grales sur chaque face du penta√®dre :
     * 
     * Pour la face Q‚ÇÅ‚ÇÇ‚ÇÖ‚ÇÑ = (p‚ÇÅ,p‚ÇÇ,p‚ÇÖ,p‚ÇÑ), on impose Œ∑ = 0 et la normale s'exprime comme :
     * 
     #    n‚ÇÅ‚ÇÇ‚ÇÖ‚ÇÑ(œà,Œ∂) = (E‚ÇÅ‚ÇÇ + Œ∂.(E‚ÇÑ‚ÇÖ + E‚ÇÇ‚ÇÅ))‚àß(E‚ÇÅ‚ÇÑ + œà.(E‚ÇÑ‚ÇÖ + E‚ÇÇ‚ÇÅ))             
     #               = E‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ + œà.E‚ÇÅ‚ÇÇ‚àßE‚ÇÑ‚ÇÖ + Œ∂.E‚ÇÇ‚ÇÖ‚àßE‚ÇÅ‚ÇÑ                        
     * 
     * L'int√©grale vaut donc :
     * 
     #    ‚Üí   ‚Üí            1  1                                                
     # ‚à¨ v‚àßn‚ÇÅ‚ÇÇ‚ÇÖ‚ÇÑ dQ‚ÇÅ‚ÇÇ‚ÇÖ‚ÇÑ = ‚à´ ‚à´[v‚ÇÅ+œà(v‚ÇÇ-v‚ÇÅ)+Œ∂(v‚ÇÑ-v‚ÇÅ)+ œàŒ∂(v‚ÇÅ+v‚ÇÖ-v‚ÇÇ-v‚ÇÑ)]‚àß[E‚ÇÅ‚ÇÇ‚àßE‚ÇÅ‚ÇÑ +
     #                    0 0                    œà.E‚ÇÅ‚ÇÇ‚àßE‚ÇÑ‚ÇÖ + Œ∂.E‚ÇÇ‚ÇÖ‚àßE‚ÇÅ‚ÇÑ] dœà dŒ∂ 
     #                   = (1/12) [ v‚ÇÅ‚àßE‚ÇÑ‚ÇÇ‚àß(E‚ÇÅ‚ÇÖ+E‚ÇÅ‚ÇÑ) + v‚ÇÇ‚àß(E‚ÇÅ‚ÇÇ+E‚ÇÑ‚ÇÇ)‚àßE‚ÇÅ‚ÇÖ       +
     #                              v‚ÇÑ‚àßE‚ÇÅ‚ÇÖ‚àß(E‚ÇÇ‚ÇÑ+E‚ÇÅ‚ÇÑ) + v‚ÇÖ‚àß(E‚ÇÅ‚ÇÇ+E‚ÇÅ‚ÇÖ)‚àßE‚ÇÇ‚ÇÑ ]     
     * 
     * Pour la face Q‚ÇÇ‚ÇÉ‚ÇÜ‚ÇÖ = (p‚ÇÇ,p‚ÇÉ,p‚ÇÜ,p‚ÇÖ), on impose Œ∑ = 1-œà et la normale s'exprime comme :
     * 
     #    n‚ÇÇ‚ÇÉ‚ÇÜ‚ÇÖ(œà,Œ∂) = (E‚ÇÉ‚ÇÜ + œà.(E‚ÇÜ‚ÇÖ + E‚ÇÇ‚ÇÉ))‚àß(E‚ÇÉ‚ÇÇ + Œ∂.(E‚ÇÜ‚ÇÖ + E‚ÇÇ‚ÇÉ))             
     #               =  E‚ÇÉ‚ÇÜ‚àßE‚ÇÉ‚ÇÇ + œà.E‚ÇÜ‚ÇÖ‚àßE‚ÇÉ‚ÇÇ + Œ∂.E‚ÇÉ‚ÇÜ‚àßE‚ÇÇ‚ÇÖ                       
     *    
     * L'int√©grale vaut donc 
     * 
     #    ‚Üí   ‚Üí            1  1                                                
     # ‚à¨ v‚àßn‚ÇÇ‚ÇÉ‚ÇÜ‚ÇÖ dQ‚ÇÇ‚ÇÉ‚ÇÜ‚ÇÖ = ‚à´ ‚à´[v‚ÇÉ+œà(v‚ÇÇ-v‚ÇÉ)+Œ∂(v‚ÇÜ-v‚ÇÉ)+œàŒ∂(v‚ÇÖ-v‚ÇÜ+v‚ÇÉ-v‚ÇÇ)]‚àß[E‚ÇÉ‚ÇÜ‚àßE‚ÇÉ‚ÇÇ +
     #                    0 0                    œà.E‚ÇÜ‚ÇÖ‚àßE‚ÇÉ‚ÇÇ + Œ∂.E‚ÇÉ‚ÇÜ‚àßE‚ÇÇ‚ÇÖ] dœà dŒ∂ 
     #                   = (1/12) [ v‚ÇÉ‚àß(E‚ÇÉ‚ÇÖ+E‚ÇÉ‚ÇÇ)‚àßE‚ÇÜ‚ÇÇ + v‚ÇÇ‚àßE‚ÇÉ‚ÇÖ‚àß(E‚ÇÜ‚ÇÇ+E‚ÇÉ‚ÇÇ)       +
     #                              v‚ÇÖ‚àßE‚ÇÇ‚ÇÜ‚àß(E‚ÇÇ‚ÇÖ+E‚ÇÉ‚ÇÖ) + v‚ÇÜ‚àß(E‚ÇÉ‚ÇÜ+E‚ÇÇ‚ÇÜ)‚àßE‚ÇÉ‚ÇÖ ]     
     * 
     * Pour la face Q‚ÇÉ‚ÇÅ‚ÇÑ‚ÇÜ = (p‚ÇÉ,p‚ÇÅ,p‚ÇÑ,p‚ÇÜ), on impose œà=0 et la normale s'exprime comme :
     * 
     #    n‚ÇÉ‚ÇÅ‚ÇÑ‚ÇÜ(Œ∑,Œ∂) = (E‚ÇÅ‚ÇÑ + Œ∑.(E‚ÇÑ‚ÇÜ + E‚ÇÉ‚ÇÅ))‚àß(E‚ÇÅ‚ÇÉ + Œ∂.(E‚ÇÑ‚ÇÜ + E‚ÇÉ‚ÇÅ))             
     #               = E‚ÇÅ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ + Œ∑.E‚ÇÑ‚ÇÜ‚àßE‚ÇÅ‚ÇÉ + Œ∂.E‚ÇÅ‚ÇÑ‚àßE‚ÇÉ‚ÇÜ                        
     * 
     * L'int√©grale vaut donc :
     * 
     #    ‚Üí   ‚Üí            1  1                                                
     # ‚à¨ v‚àßn‚ÇÉ‚ÇÅ‚ÇÑ‚ÇÜ dQ‚ÇÉ‚ÇÅ‚ÇÑ‚ÇÜ = ‚à´ ‚à´[v‚ÇÅ+Œ∑(v‚ÇÉ-v‚ÇÅ)+Œ∂(v‚ÇÑ-v‚ÇÅ)+Œ∑Œ∂(v‚ÇÅ+v‚ÇÜ-v‚ÇÉ-v‚ÇÑ)]‚àß[E‚ÇÅ‚ÇÑ‚àßE‚ÇÅ‚ÇÉ +
     #                    0 0                    Œ∑.E‚ÇÑ‚ÇÜ‚àßE‚ÇÅ‚ÇÉ + Œ∂.E‚ÇÅ‚ÇÑ‚àßE‚ÇÉ‚ÇÜ] dŒ∑ dŒ∂ 
     #                   = (1/12) [ v‚ÇÅ‚àßE‚ÇÉ‚ÇÑ‚àß(E‚ÇÅ‚ÇÜ+E‚ÇÅ‚ÇÉ) + v‚ÇÉ‚àß(E‚ÇÉ‚ÇÑ+E‚ÇÉ‚ÇÅ)‚àßE‚ÇÅ‚ÇÜ       +
     #                              v‚ÇÑ‚àß(E‚ÇÉ‚ÇÑ+E‚ÇÅ‚ÇÑ)‚àßE‚ÇÅ‚ÇÜ + v‚ÇÜ‚àßE‚ÇÉ‚ÇÑ‚àß(E‚ÇÉ‚ÇÜ+E‚ÇÅ‚ÇÜ) ]     
     * 
     * Pour la face T‚ÇÅ‚ÇÉ‚ÇÇ = (p‚ÇÅ,p‚ÇÉ,p‚ÇÇ), on impose Œ∂=0 et la normale vaut :
     * 
     #    n‚ÇÅ‚ÇÉ‚ÇÇ = E‚ÇÅ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ                                                       
     * 
     * et l'int√©grale vaut donc :
     * 
     #    ‚Üí   ‚Üí           1 1-Œ∑                                                
     # ‚à¨ v‚àßn‚ÇÅ‚ÇÉ‚ÇÇ dT‚ÇÅ‚ÇÉ‚ÇÇ = ‚à´ ‚à´ [v‚ÇÅ + œà(v‚ÇÇ-v‚ÇÅ) + Œ∑(v‚ÇÉ-v‚ÇÅ) ]‚àß[E‚ÇÅ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ] dœà dŒ∑      
     #                   0 0                                                   
     #                 = (1/6)(v‚ÇÅ+v‚ÇÇ+v‚ÇÉ)‚àßE‚ÇÅ‚ÇÉ‚àßE‚ÇÅ‚ÇÇ                              
     * 
     * Pour la face T‚ÇÑ‚ÇÖ‚ÇÜ = (p‚ÇÑ,p‚ÇÖ,p‚ÇÜ), on impose Œ∂=1 et la normale vaut :
     * 
     #    n‚ÇÑ‚ÇÖ‚ÇÜ = E‚ÇÑ‚ÇÖ‚àßE‚ÇÑ‚ÇÜ                                                       
     * 
     #    ‚Üí   ‚Üí           1 1-Œ∑                                                
     # ‚à¨ v‚àßn‚ÇÅ‚ÇÉ‚ÇÇ dT‚ÇÅ‚ÇÉ‚ÇÇ = ‚à´ ‚à´ [v‚ÇÑ + œà(v‚ÇÖ-v‚ÇÑ) + Œ∑(v‚ÇÜ-v‚ÇÑ) ]‚àß[E‚ÇÑ‚ÇÖ‚àßE‚ÇÑ‚ÇÜ] dœà dŒ∑      
     #                   0 0                                                   
     #                 = (1/6)(v‚ÇÑ+v‚ÇÖ+v‚ÇÜ)‚àßE‚ÇÑ‚ÇÖ‚àßE‚ÇÑ‚ÇÜ                              
     * 
     * En sommant les cinq int√©grales calcul√©es ci--dessus et en multipliant par (-1/V),
     * on trouve bien le rotationnel recherch√©.
     * 
     * @param p1 Premier   sommet du penta√®dre
     * @param p2 Second    sommet du penta√®dre
     * @param p3 Troisi√®me sommet du penta√®dre
     * @param p4 Quatri√®me sommet du penta√®dre
     * @param p5 Cinqui√®me sommet du penta√®dre
     * @param p6 Sixi√®me   sommet du penta√®dre
     * @param v1 Valeur de la vitesse au point p‚ÇÅ
     * @param v2 Valeur de la vitesse au point p‚ÇÇ
     * @param v3 Valeur de la vitesse au point p‚ÇÉ
     * @param v4 Valeur de la vitesse au point p‚ÇÑ
     * @param v5 Valeur de la vitesse au point p‚ÇÖ
     * @param v6 Valeur de la vitesse au point p‚ÇÜ
     * @return Le vecteur rotationnel obtenu
     */
    vector3d compute_rotational_on_pentahedra( const point3d& p1, const point3d& p2, const point3d& p3, 
                                               const point3d& p4, const point3d& p5, const point3d& p6,
                                               const vector3d& v1, const vector3d& v2, const vector3d& v3,
                                               const vector3d& v4, const vector3d& v5, const vector3d& v6);
    /**
     * @brief Calcul le rotationnel de la vitesse sur un hexa√®dre
     * @details Calcul le rotationnel de la vitesse d√©finie aux sommets d'un hexa√®dre
     * 
     * Soit H = (p‚ÇÅ,p‚ÇÇ,p‚ÇÉ,p‚ÇÑ,p‚ÇÖ,p‚ÇÜ,p‚Çá,p‚Çà) un hexa√®dre. On suppose, quitte √† faire une translation du rep√®re,
     * que p‚ÇÅ se situe √† l'origine du rep√®re. On peut alors trouver une fonction permettant de passer de l'hexa√®dre de
     * r√©f√©rence √† H √† l'aide d'une fonction trilin√©aire :
     * 
     ?   p‚Çà____________p‚Çá       
     ?   ‚ï±‚Åû           ‚ï±‚îÇ        
     ?  ‚ï± ‚Åû          ‚ï± ‚îÇ
     ? p‚ÇÖ___________p‚ÇÜ ‚îÇ        œï : [0;1]¬≥ ----> ‚Ñù¬≥
     ? ‚îÇ  ‚Åû         ‚îÇ  ‚îÇ            œà,Œ∑,Œ∂  ----> œà.E‚ÇÅ‚ÇÇ + Œ∑.E‚ÇÅ‚ÇÑ + Œ∂.E‚ÇÅ‚ÇÖ + œàŒ∑.(E‚ÇÑ‚ÇÉ+E‚ÇÇ‚ÇÅ) + œàŒ∂.(E‚ÇÖ‚ÇÜ+E‚ÇÇ‚ÇÅ) +
     ? ‚îÇ  p‚ÇÑ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚îÇ‚Ä¶‚Ä¶p‚ÇÉ                        Œ∑Œ∂.(E‚ÇÖ‚Çà+E‚ÇÑ‚ÇÅ) + œàŒ∑Œ∂.(E‚Çà‚Çá+E‚ÇÉ‚ÇÑ+E‚ÇÜ‚ÇÖ+E‚ÇÅ‚ÇÇ)
     ? ‚îÇ  /         ‚îÇ ‚ï±
     ? ‚îÇ /          ‚îÇ‚ï±          avec E·µ¢‚±º le vecteur ayant pour origine le sommet p·µ¢ et pour extr√©mit√© le sommet p‚±º.
     ? p‚ÇÅ___________p‚ÇÇ
     * 
     * Puisque le champs de vitesse est d√©fini par rapport aux valeurs de la vitesse aux sommets de H, on peut l'exprimer
     * √©galement √† l'aide d'une fonction trilin√©aire :
     * 
     # v(œà,Œ∑,Œ∂) = v‚ÇÅ + œà.(v‚ÇÇ-v‚ÇÅ) + Œ∑.(v‚ÇÑ-v‚ÇÅ) + Œ∂.(v‚ÇÖ-v‚ÇÅ) + œàŒ∑.(v‚ÇÉ-v‚ÇÑ+v‚ÇÅ-v‚ÇÇ)    +
     #      œàŒ∂.(v‚ÇÜ-v‚ÇÖ+v‚ÇÅ-v‚ÇÇ) + Œ∑Œ∂.(v‚Çà-v‚ÇÖ+v‚ÇÅ-v‚ÇÑ) + œàŒ∑Œ∂.(v‚Çá-v‚Çà+v‚ÇÑ-v‚ÇÉ+v‚ÇÖ-v‚ÇÜ+v‚ÇÇ-v‚ÇÅ)
     * 
     * Calculons les int√©grales sur chaque face de l'hexa√®dre pour ensuite utiliser le th√©or√®me du rotationnel.
     * On utilise pour cela la formule g√©n√©rale trouv√©e pour les n-gons dans le cadre de face quadrangulaire
     *   
     * @param p1 Premier sommet de l'hexa√®dre                           
     * @param p2 second sommet de l'hexa√®dre                            
     * @param p3 Troisi√®me sommet de l'hexa√®dre                         
     * @param p4 Quatri√®me sommet de l'hexa√®dre                         
     * @param p5 Cinqui√®me sommet de l'hexa√®dre                         
     * @param p6 Sixi√®me sommet de l'hexa√®dre                           
     * @param p7 Septi√®me sommet de l'hexa√®dre                          
     * @param p8 Huiti√®me sommet de l'hexa√®dre                          
     * @param v1 Vecteur vitesse au premier sommet de l'hexa√®dre        
     * @param v2 Vecteur vitesse au second sommet de l'hexa√®dre         
     * @param v3 Vecteur vitesse au troisi√®me sommet de l'hexa√®dre      
     * @param v4 Vecteur vitesse au quatri√®me sommet de l'hexa√®dre      
     * @param v5 Vecteur vitesse au cinqui√®me sommet de l'hexa√®dre      
     * @param v6 Vecteur vitesse au sixi√®me sommet de l'hexa√®dre        
     * @param v7 Vecteur vitesse au septi√®me sommet de l'hexa√®dre       
     * @param v8 Vecteur vitesse au huiti√®me sommet de l'hexa√®dre       
     * @return Retourne le rotationel moyen au sein de l'hexa√®dre       
     */
    vector3d compute_rotational_on_hexaedra( const point3d& p1, const point3d& p2, const point3d& p3, const point3d& p4,
                                             const point3d& p5, const point3d& p6, const point3d& p7, const point3d& p8,
                                             const vector3d& v1, const vector3d& v2, const vector3d& v3, const vector3d & v4,
                                             const vector3d& v5, const vector3d& v6, const vector3d& v7, const vector3d& v8 );

    /**
     * @brief Calcul le rotationnel de la vitesse sur un polygone
     * @details Calcul le rotationnel de la vitesse sur un polygone quelconque √† face triangulaire ou quadrangulaire
     * 
     * L'id√©e ici est de calculer chaque int√©grale de surface en param√©trisant localement la face dans un rep√®re
     * absolu.
     * 
     * Ainsi, pour une face triangulaire F·µ¢‚±º‚Çñ = (p·µ¢,p‚±º,p‚Çñ), la param√©trisation de la face est :
     * 
     # œï·µ¢‚±º‚Çñ : [0;1]¬≤ ----> ‚Ñù¬≥ avec 0 ‚â§ œà+Œ∑ ‚â§ 1                                 
     #         œà,Œ∑  ----> p·µ¢ + œà.E·µ¢‚±º + Œ∑.E·µ¢‚Çñ                                   
     *         
     * et la normale (orient√©e vers l'ext√©rieur du polygone) vaut :
     * 
     #      n·µ¢‚±º‚Çñ = E·µ¢‚±º‚àßE·µ¢‚Çñ                                                     
     *
     * De m√™me sur F·µ¢‚±º‚Çñ, la vitesse peut √™tre exprimer par une fonction lin√©aire :
     * 
     # v(œà,Œ∑) = v·µ¢ + œà.(v‚±º-v·µ¢) + Œ∑.(v‚Çñ-v·µ¢)                                     
     *
     * La valeurs de l'int√©grale est alors :
     * 
     #    ‚Üí  ‚Üí              1  1-Œ∑                                             
     # ‚à¨ v‚àßn·µ¢‚±º‚Çñ dT·µ¢‚±º‚Çñ=(1/4)‚à´  ‚à´ [v·µ¢ + œà.(v‚±º-v·µ¢) + Œ∑.(v‚Çñ-v·µ¢)]‚àß[E·µ¢‚±º‚àßE·µ¢‚Çñ] dœà dŒ∑   
     #  T·µ¢‚±º‚Çñ               0  0                                                
     #               = (1/6)(v·µ¢+v‚±ºv‚Çñ)‚àßE·µ¢‚±º‚àßE·µ¢‚Çñ                                  
     *
     * Pour une face quadrangulaire F·µ¢‚±º‚Çñ‚Çó = (p·µ¢,p‚±º,p‚Çñ,p‚Çó), la param√©trisation de la face est :
     * 
     # œï·µ¢‚±º‚Çñ‚Çó : [0;1]¬≤ ----> ‚Ñù¬≥                                                  
     #          œà,Œ∑  ----> p·µ¢ + œà.E·µ¢‚±º + Œ∑.E·µ¢‚Çó + œàŒ∑.(E‚±º‚Çñ + E‚Çó·µ¢)                   
     *         
     * et la normale est en fonction de œà et Œ∑ :
     * 
     #      n·µ¢‚±º‚Çñ‚Çó = (E·µ¢‚±º + Œ∑.(E‚±º‚Çñ + E‚Çó·µ¢))‚àß(E·µ¢‚Çó + œà.(E‚±º‚Çñ + E‚Çó·µ¢))                    
     #           = E·µ¢‚±º‚àßE·µ¢‚Çó + œà.E·µ¢‚±º‚àßE‚Çó‚Çñ + Œ∑.E‚±º‚Çñ‚àßE·µ¢‚Çó                               
     *           
     * La valeurs de l'int√©grale est alors :
     * 
     #    ‚Üí   ‚Üí           1 1                                                 
     # ‚à¨ v‚àßn·µ¢‚±º‚Çñ‚Çó dF·µ¢‚±º‚Çñ‚Çó = ‚à´ ‚à´  [v·µ¢+œà(v‚±º-v·µ¢)+Œ∑(v‚Çó-v·µ¢)+ œàŒ∑(v·µ¢+v‚Çñ-v‚±º-v‚Çó)]‚àß[E·µ¢‚±º‚àßE·µ¢‚Çó   +
     #                   0 0                         œà.E·µ¢‚±º‚àßE‚Çó‚Çñ + Œ∑.E‚±º‚Çñ‚àßE·µ¢‚Çó] dœà dŒ∂
     #                = (1/12)[v·µ¢‚àßE‚Çó‚±º‚àß(E·µ¢‚Çñ+E·µ¢‚Çó) + v‚±º‚àßE·µ¢‚Çñ‚àß(E‚±º‚Çó+E‚±º·µ¢)              +
     #                         v‚Çñ‚àßE‚Çó‚±º‚àß(E‚Çó‚Çñ+E·µ¢‚Çñ)  + v‚Çó‚àßE·µ¢‚Çñ‚àß(E‚±º‚Çó+E·µ¢‚Çó) ]              
     *  
     *  Il suffit alors de sommer les int√©grales  calcul√©es  par face et
     *  de diviser par le volume du polygone
     @ ref Pour le volume, voir volume.hpp pour la m√©thode de calcul  du
     -     volume du polygone                                           
     * 
     * @param faces Le tableau des faces du polygone                    
     @ ref voir  face.hpp  pour  une  plus  ample   explication  sur  la
     -     structure et les m√©thodes de face                            
     * @return Le rotationnel (constant) calcul√© dans le polyg√¥ne       
     */
    vector3d 
    compute_rotational_on_ngon( const std::vector<face>& faces, 
                                const std::array<K_MEMORY::vector_view<const E_Float>,3>& velocity );
}

#endif
